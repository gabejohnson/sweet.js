"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require("immutable");

var _enforester = require("./enforester");

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

var _loadSyntax = require("./load-syntax");

var _scope = require("./scope");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _astDispatcher = require("./ast-dispatcher");

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

var _hygieneUtils = require("./hygiene-utils");

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bindImports_1213(impTerm_1216, exModule_1217, context_1218) {
  let names_1219 = [];
  let phase_1220 = impTerm_1216.forSyntax ? context_1218.phase + 1 : context_1218.phase;
  impTerm_1216.namedImports.forEach(specifier_1221 => {
    let name_1222 = specifier_1221.binding.name;
    let exportName_1223 = findNameInExports_1214(name_1222, exModule_1217.exportEntries);
    if (exportName_1223 != null) {
      let newBinding = (0, _symbol.gensym)(name_1222.val());
      context_1218.store.set(newBinding.toString(), new _transforms.VarBindingTransform(name_1222));
      context_1218.bindings.addForward(name_1222, exportName_1223, newBinding, phase_1220);
      names_1219.push(name_1222);
    }
  });
  return (0, _immutable.List)(names_1219);
}
function findNameInExports_1214(name_1224, exp_1225) {
  let foundNames_1226 = exp_1225.reduce((acc_1227, e_1228) => {
    if ((0, _terms.isExportFrom)(e_1228)) {
      return acc_1227.concat(e_1228.namedExports.reduce((acc_1229, specifier_1230) => {
        if (specifier_1230.exportedName.val() === name_1224.val()) {
          return acc_1229.concat(specifier_1230.exportedName);
        }
        return acc_1229;
      }, (0, _immutable.List)()));
    } else if ((0, _terms.isExport)(e_1228)) {
      return acc_1227.concat(e_1228.declaration.declarators.reduce((acc_1231, decl_1232) => {
        if (decl_1232.binding.name.val() === name_1224.val()) {
          return acc_1231.concat(decl_1232.binding.name);
        }
        return acc_1231;
      }, (0, _immutable.List)()));
    }
    return acc_1227;
  }, (0, _immutable.List)());
  (0, _errors.assert)(foundNames_1226.size <= 1, "expecting no more than 1 matching name in exports");
  return foundNames_1226.get(0);
}
function removeNames_1215(impTerm_1233, names_1234) {
  let namedImports_1235 = impTerm_1233.namedImports.filter(specifier_1236 => !names_1234.contains(specifier_1236.binding.name));
  return impTerm_1233.extend({ namedImports: namedImports_1235 });
}
class TokenExpander extends _astDispatcher2.default {
  constructor(context_1237) {
    super("expand", false);
    this.context = context_1237;
  }
  expand(stxl_1238) {
    let result_1239 = [];
    if (stxl_1238.size === 0) {
      return (0, _immutable.List)(result_1239);
    }
    let prev_1240 = (0, _immutable.List)();
    let enf_1241 = new _enforester.Enforester(stxl_1238, prev_1240, this.context);
    while (!enf_1241.done) {
      result_1239.push(this.dispatch(enf_1241.enforest()));
    }
    return (0, _immutable.List)(result_1239);
  }
  expandVariableDeclarationStatement(term_1242) {
    return term_1242.extend({ declaration: this.registerVariableDeclaration(term_1242.declaration) });
  }
  expandFunctionDeclaration(term_1243) {
    let registeredTerm_1244 = this.registerFunctionOrClass(term_1243);
    let stx_1245 = registeredTerm_1244.name.name;
    this.context.env.set(stx_1245.resolve(this.context.phase), new _transforms.VarBindingTransform(stx_1245));
    return registeredTerm_1244;
  }
  expandImport(term_1246) {
    let path_1247 = term_1246.moduleSpecifier.val();
    let mod_1248;
    if (term_1246.forSyntax) {
      mod_1248 = this.context.modules.getAtPhase(path_1247, this.context.phase + 1, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1248, this.context.phase + 1, this.context.store);
      this.context.store = this.context.modules.invoke(mod_1248, this.context.phase + 1, this.context.store);
    } else {
      mod_1248 = this.context.modules.getAtPhase(path_1247, this.context.phase, this.context.cwd);
      this.context.store = this.context.modules.visit(mod_1248, this.context.phase, this.context.store);
    }
    let boundNames_1249 = bindImports_1213(term_1246, mod_1248, this.context);
    return removeNames_1215(term_1246, boundNames_1249);
  }
  expandExport(term_1250) {
    if ((0, _terms.isFunctionDeclaration)(term_1250.declaration) || (0, _terms.isClassDeclaration)(term_1250.declaration)) {
      return term_1250.extend({ declaration: this.registerFunctionOrClass(term_1250.declaration) });
    } else if ((0, _terms.isVariableDeclaration)(term_1250.declaration)) {
      return term_1250.extend({ declaration: this.registerVariableDeclaration(term_1250.declaration) });
    }
    return term_1250;
  }
  registerFunctionOrClass(term_1251) {
    let name_1252 = term_1251.name.removeScope(this.context.useScope, this.context.phase);
    (0, _hygieneUtils.collectBindings)(term_1251.name).forEach(stx_1253 => {
      let newBinding_1254 = (0, _symbol.gensym)(stx_1253.val());
      this.context.bindings.add(stx_1253, { binding: newBinding_1254, phase: this.context.phase, skipDup: false });
      this.context.env.set(newBinding_1254.toString(), new _transforms.VarBindingTransform(stx_1253));
    });
    return term_1251.extend({ name: name_1252 });
  }
  registerVariableDeclaration(term_1255) {
    if ((0, _terms.isSyntaxDeclaration)(term_1255) || (0, _terms.isSyntaxrecDeclaration)(term_1255)) {
      return this.registerSyntaxDeclaration(term_1255);
    }
    return term_1255.extend({ declarators: term_1255.declarators.map(decl_1256 => {
        let binding_1257 = decl_1256.binding.removeScope(this.context.useScope, this.context.phase);
        (0, _hygieneUtils.collectBindings)(binding_1257).forEach(stx_1258 => {
          let newBinding_1259 = (0, _symbol.gensym)(stx_1258.val());
          this.context.bindings.add(stx_1258, { binding: newBinding_1259, phase: this.context.phase, skipDup: term_1255.kind === "var" });
          this.context.env.set(newBinding_1259.toString(), new _transforms.VarBindingTransform(stx_1258));
        });
        return decl_1256.extend({ binding: binding_1257 });
      }) });
  }
  registerSyntaxDeclaration(term_1260) {
    if ((0, _terms.isSyntaxDeclaration)(term_1260)) {
      let scope = (0, _scope.freshScope)("nonrec");
      term_1260 = term_1260.extend({ declarators: term_1260.declarators.map(decl_1261 => {
          let name_1262 = decl_1261.binding.name;
          let nameAdded_1263 = name_1262.addScope(scope, this.context.bindings, _syntax.ALL_PHASES);
          let nameRemoved_1264 = name_1262.removeScope(this.context.currentScope[this.context.currentScope.length - 1], this.context.phase);
          let newBinding_1265 = (0, _symbol.gensym)(name_1262.val());
          this.context.bindings.addForward(nameAdded_1263, nameRemoved_1264, newBinding_1265, this.context.phase);
          return decl_1261.extend({ init: decl_1261.init.addScope(scope, this.context.bindings, _syntax.ALL_PHASES) });
        }) });
    }
    return term_1260.extend({ declarators: term_1260.declarators.map(decl_1266 => {
        let binding_1267 = decl_1266.binding.removeScope(this.context.useScope, this.context.phase);
        let syntaxExpander_1268 = new _termExpander2.default(_.merge(this.context, { phase: this.context.phase + 1, env: new _env2.default(), store: this.context.store }));
        let init_1269 = syntaxExpander_1268.expand(decl_1266.init);
        let val_1270 = (0, _loadSyntax.evalCompiletimeValue)(init_1269.gen(), _.merge(this.context, { phase: this.context.phase + 1 }));
        (0, _hygieneUtils.collectBindings)(binding_1267).forEach(stx_1271 => {
          let newBinding_1272 = (0, _symbol.gensym)(stx_1271.val());
          this.context.bindings.add(stx_1271, { binding: newBinding_1272, phase: this.context.phase, skipDup: false });
          let resolvedName_1273 = stx_1271.resolve(this.context.phase);
          this.context.env.set(resolvedName_1273, new _transforms.CompiletimeTransform(val_1270));
        });
        return decl_1266.extend({ binding: binding_1267, init: init_1269 });
      }) });
  }
}
exports.default = TokenExpander;
//# sourceMappingURL=data:application/json;base64,