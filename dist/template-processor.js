"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceTemplate = exports.processTemplate = undefined;

var _immutable = require("immutable");

var _ramdaFantasy = require("ramda-fantasy");

var _ramda = require("ramda");

var _ramda2 = _interopRequireDefault(_ramda);

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isDolar_910 = s_921 => s_921 && s_921 instanceof _syntax2.default && s_921.match("identifier") && s_921.val() === "$";
const isDelimiter_911 = s_922 => s_922 && typeof s_922.match === "function" && s_922.match("delimiter");
const isBraces_912 = s_923 => s_923 && typeof s_923.match === "function" && s_923.match("braces");
const isParens_913 = s_924 => s_924 && typeof s_924.match === "function" && s_924.match("parens");
const isBrackets_914 = s_925 => s_925 && typeof s_925.match === "function" && s_925.match("brackets");
const insertIntoDelimiter_915 = _ramda2.default.cond([[isBraces_912, (s_926, r_927) => _syntax2.default.from("braces", r_927, s_926)], [isParens_913, (s_928, r_929) => _syntax2.default.from("parens", r_929, s_928)], [isBrackets_914, (s_930, r_931) => _syntax2.default.from("brackets", r_931, s_930)]]);
const process_916 = (acc_932, s_933) => {
  if (isBraces_912(s_933) && isDolar_910(acc_932.template.last())) {
    return { template: acc_932.template.push(_syntax2.default.from("braces", _immutable.List.of(_syntax2.default.from("number", acc_932.interp.size)), s_933)), interp: acc_932.interp.push(s_933.inner()) };
  } else if (isDelimiter_911(s_933)) {
    let innerResult = processTemplate_919(s_933.inner(), acc_932.interp);
    return { template: acc_932.template.push(insertIntoDelimiter_915(s_933, innerResult.template)), interp: innerResult.interp };
  } else {
    return { template: acc_932.template.push(s_933), interp: acc_932.interp };
  }
};
function cloneLineNumber_917(to_934, from_935) {
  if (from_935 && to_934 && typeof to_934.setLineNumber === "function") {
    return to_934.setLineNumber(from_935.lineNumber());
  }
  return to_934;
}
const replace_918 = (acc_936, s_937) => {
  let last_938 = acc_936.template.get(-1);
  let beforeLast_939 = acc_936.template.get(-2);
  if (isBraces_912(s_937) && isDolar_910(last_938)) {
    let index = s_937.inner().first().val();
    (0, _errors.assert)(acc_936.rep.size > index, "unknown replacement value");
    let replacement = cloneLineNumber_917(acc_936.rep.get(index), beforeLast_939);
    return { template: acc_936.template.pop().concat(replacement), rep: acc_936.rep };
  } else if (isDelimiter_911(s_937)) {
    let innerResult = replaceTemplate_920(s_937.inner(), acc_936.rep);
    return { template: acc_936.template.push(insertIntoDelimiter_915(s_937, innerResult)), rep: acc_936.rep };
  } else {
    return { template: acc_936.template.push(s_937), rep: acc_936.rep };
  }
};
function processTemplate_919(temp_940) {
  let interp_941 = arguments.length <= 1 || arguments[1] === undefined ? (0, _immutable.List)() : arguments[1];

  return temp_940.reduce(process_916, { template: (0, _immutable.List)(), interp: interp_941 });
}
function replaceTemplate_920(temp_942, rep_943) {
  return temp_942.reduce(replace_918, { template: (0, _immutable.List)(), rep: rep_943 }).template;
}
exports.processTemplate = processTemplate_919;
exports.replaceTemplate = replaceTemplate_920;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N3ZWV0L3RlbXBsYXRlLXByb2Nlc3Nvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0EsTUFBTSxjQUFjLFNBQVMsU0FBUyxpQ0FBVCxJQUFvQyxNQUFNLEtBQU4sQ0FBWSxZQUFaLENBQXBDLElBQWlFLE1BQU0sR0FBTixPQUFnQixHQUE5RztBQUNBLE1BQU0sa0JBQWtCLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxXQUFaLENBQS9FO0FBQ0EsTUFBTSxlQUFlLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxRQUFaLENBQTVFO0FBQ0EsTUFBTSxlQUFlLFNBQVMsU0FBUyxPQUFPLE1BQU0sS0FBYixLQUF1QixVQUFoQyxJQUE4QyxNQUFNLEtBQU4sQ0FBWSxRQUFaLENBQTVFO0FBQ0EsTUFBTSxpQkFBaUIsU0FBUyxTQUFTLE9BQU8sTUFBTSxLQUFiLEtBQXVCLFVBQWhDLElBQThDLE1BQU0sS0FBTixDQUFZLFVBQVosQ0FBOUU7QUFDQSxNQUFNLDBCQUEwQixnQkFBRSxJQUFGLENBQU8sQ0FBQyxDQUFDLFlBQUQsRUFBZSxDQUFDLEtBQUQsRUFBUSxLQUFSLEtBQWtCLGlCQUFPLElBQVAsQ0FBWSxRQUFaLEVBQXNCLEtBQXRCLEVBQTZCLEtBQTdCLENBQWpDLENBQUQsRUFBd0UsQ0FBQyxZQUFELEVBQWUsQ0FBQyxLQUFELEVBQVEsS0FBUixLQUFrQixpQkFBTyxJQUFQLENBQVksUUFBWixFQUFzQixLQUF0QixFQUE2QixLQUE3QixDQUFqQyxDQUF4RSxFQUErSSxDQUFDLGNBQUQsRUFBaUIsQ0FBQyxLQUFELEVBQVEsS0FBUixLQUFrQixpQkFBTyxJQUFQLENBQVksVUFBWixFQUF3QixLQUF4QixFQUErQixLQUEvQixDQUFuQyxDQUEvSSxD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aEIsRUFBNkIsRUFBQyxVQUFVLHNCQUFYLEVBQW1CLFFBQVEsVUFBM0IsRUFBN0IsQ0FBUDtBQUNEO0FBQ0QsU0FBUyxtQkFBVCxDQUE2QixRQUE3QixFQUF1QyxPQUF2QyxFQUFnRDtBQUM5QyxTQUFPLFNBQVMsTUFBVCxDQUFnQixXQUFoQixFQUE2QixFQUFDLFVBQVUsc0JBQVgsRUFBbUIsS0FBSyxPQUF4QixFQUE3QixFQUErRCxRQUF0RTtBQUNEO1FBQzhCLGUsR0FBdkIsbUI7UUFDdUIsZSxHQUF2QixtQiIsImZpbGUiOiJ0ZW1wbGF0ZS1wcm9jZXNzb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpc3R9IGZyb20gXCJpbW11dGFibGVcIjtcbmltcG9ydCB7TWF5YmV9IGZyb20gXCJyYW1kYS1mYW50YXN5XCI7XG5pbXBvcnQgXyBmcm9tIFwicmFtZGFcIjtcbmltcG9ydCBTeW50YXggZnJvbSBcIi4vc3ludGF4XCI7XG5pbXBvcnQge2Fzc2VydH0gZnJvbSBcIi4vZXJyb3JzXCI7XG5jb25zdCBpc0RvbGFyXzkxMCA9IHNfOTIxID0+IHNfOTIxICYmIHNfOTIxIGluc3RhbmNlb2YgU3ludGF4ICYmIHNfOTIxLm1hdGNoKFwiaWRlbnRpZmllclwiKSAmJiBzXzkyMS52YWwoKSA9PT0gXCIkXCI7XG5jb25zdCBpc0RlbGltaXRlcl85MTEgPSBzXzkyMiA9PiBzXzkyMiAmJiB0eXBlb2Ygc185MjIubWF0Y2ggPT09IFwiZnVuY3Rpb25cIiAmJiBzXzkyMi5tYXRjaChcImRlbGltaXRlclwiKTtcbmNvbnN0IGlzQnJhY2VzXzkxMiA9IHNfOTIzID0+IHNfOTIzICYmIHR5cGVvZiBzXzkyMy5tYXRjaCA9PT0gXCJmdW5jdGlvblwiICYmIHNfOTIzLm1hdGNoKFwiYnJhY2VzXCIpO1xuY29uc3QgaXNQYXJlbnNfOTEzID0gc185MjQgPT4gc185MjQgJiYgdHlwZW9mIHNfOTI0Lm1hdGNoID09PSBcImZ1bmN0aW9uXCIgJiYgc185MjQubWF0Y2goXCJwYXJlbnNcIik7XG5jb25zdCBpc0JyYWNrZXRzXzkxNCA9IHNfOTI1ID0+IHNfOTI1ICYmIHR5cGVvZiBzXzkyNS5tYXRjaCA9PT0gXCJmdW5jdGlvblwiICYmIHNfOTI1Lm1hdGNoKFwiYnJhY2tldHNcIik7XG5jb25zdCBpbnNlcnRJbnRvRGVsaW1pdGVyXzkxNSA9IF8uY29uZChbW2lzQnJhY2VzXzkxMiwgKHNfOTI2LCByXzkyNykgPT4gU3ludGF4LmZyb20oXCJicmFjZXNcIiwgcl85MjcsIHNfOTI2KV0sIFtpc1BhcmVuc185MTMsIChzXzkyOCwgcl85MjkpID0+IFN5bnRheC5mcm9tKFwicGFyZW5zXCIsIHJfOTI5LCBzXzkyOCldLCBbaXNCcmFja2V0c185MTQsIChzXzkzMCwgcl85MzEpID0+IFN5bnRheC5mcm9tKFwiYnJhY2tldHNcIiwgcl85MzEsIHNfOTMwKV1dKTtcbmNvbnN0IHByb2Nlc3NfOTE2ID0gKGFjY185MzIsIHNfOTMzKSA9PiB7XG4gIGlmIChpc0JyYWNlc185MTIoc185MzMpICYmIGlzRG9sYXJfOTEwKGFjY185MzIudGVtcGxhdGUubGFzdCgpKSkge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY185MzIudGVtcGxhdGUucHVzaChTeW50YXguZnJvbShcImJyYWNlc1wiLCBMaXN0Lm9mKFN5bnRheC5mcm9tKFwibnVtYmVyXCIsIGFjY185MzIuaW50ZXJwLnNpemUpKSwgc185MzMpKSwgaW50ZXJwOiBhY2NfOTMyLmludGVycC5wdXNoKHNfOTMzLmlubmVyKCkpfTtcbiAgfSBlbHNlIGlmIChpc0RlbGltaXRlcl85MTEoc185MzMpKSB7XG4gICAgbGV0IGlubmVyUmVzdWx0ID0gcHJvY2Vzc1RlbXBsYXRlXzkxOShzXzkzMy5pbm5lcigpLCBhY2NfOTMyLmludGVycCk7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzkzMi50ZW1wbGF0ZS5wdXNoKGluc2VydEludG9EZWxpbWl0ZXJfOTE1KHNfOTMzLCBpbm5lclJlc3VsdC50ZW1wbGF0ZSkpLCBpbnRlcnA6IGlubmVyUmVzdWx0LmludGVycH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHt0ZW1wbGF0ZTogYWNjXzkzMi50ZW1wbGF0ZS5wdXNoKHNfOTMzKSwgaW50ZXJwOiBhY2NfOTMyLmludGVycH07XG4gIH1cbn07XG5mdW5jdGlvbiBjbG9uZUxpbmVOdW1iZXJfOTE3KHRvXzkzNCwgZnJvbV85MzUpIHtcbiAgaWYgKGZyb21fOTM1ICYmIHRvXzkzNCAmJiB0eXBlb2YgdG9fOTM0LnNldExpbmVOdW1iZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB0b185MzQuc2V0TGluZU51bWJlcihmcm9tXzkzNS5saW5lTnVtYmVyKCkpO1xuICB9XG4gIHJldHVybiB0b185MzQ7XG59XG5jb25zdCByZXBsYWNlXzkxOCA9IChhY2NfOTM2LCBzXzkzNykgPT4ge1xuICBsZXQgbGFzdF85MzggPSBhY2NfOTM2LnRlbXBsYXRlLmdldCgtMSk7XG4gIGxldCBiZWZvcmVMYXN0XzkzOSA9IGFjY185MzYudGVtcGxhdGUuZ2V0KC0yKTtcbiAgaWYgKGlzQnJhY2VzXzkxMihzXzkzNykgJiYgaXNEb2xhcl85MTAobGFzdF85MzgpKSB7XG4gICAgbGV0IGluZGV4ID0gc185MzcuaW5uZXIoKS5maXJzdCgpLnZhbCgpO1xuICAgIGFzc2VydChhY2NfOTM2LnJlcC5zaXplID4gaW5kZXgsIFwidW5rbm93biByZXBsYWNlbWVudCB2YWx1ZVwiKTtcbiAgICBsZXQgcmVwbGFjZW1lbnQgPSBjbG9uZUxpbmVOdW1iZXJfOTE3KGFjY185MzYucmVwLmdldChpbmRleCksIGJlZm9yZUxhc3RfOTM5KTtcbiAgICByZXR1cm4ge3RlbXBsYXRlOiBhY2NfOTM2LnRlbXBsYXRlLnBvcCgpLmNvbmNhdChyZXBsYWNlbWVudCksIHJlcDogYWNjXzkzNi5yZXB9O1xuICB9IGVsc2UgaWYgKGlzRGVsaW1pdGVyXzkxMShzXzkzNykpIHtcbiAgICBsZXQgaW5uZXJSZXN1bHQgPSByZXBsYWNlVGVtcGxhdGVfOTIwKHNfOTM3LmlubmVyKCksIGFjY185MzYucmVwKTtcbiAgICByZXR1cm4ge3RlbXBsYXRlOiBhY2NfOTM2LnRlbXBsYXRlLnB1c2goaW5zZXJ0SW50b0RlbGltaXRlcl85MTUoc185MzcsIGlubmVyUmVzdWx0KSksIHJlcDogYWNjXzkzNi5yZXB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dGVtcGxhdGU6IGFjY185MzYudGVtcGxhdGUucHVzaChzXzkzNyksIHJlcDogYWNjXzkzNi5yZXB9O1xuICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc1RlbXBsYXRlXzkxOSh0ZW1wXzk0MCwgaW50ZXJwXzk0MSA9IExpc3QoKSkge1xuICByZXR1cm4gdGVtcF85NDAucmVkdWNlKHByb2Nlc3NfOTE2LCB7dGVtcGxhdGU6IExpc3QoKSwgaW50ZXJwOiBpbnRlcnBfOTQxfSk7XG59XG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGVfOTIwKHRlbXBfOTQyLCByZXBfOTQzKSB7XG4gIHJldHVybiB0ZW1wXzk0Mi5yZWR1Y2UocmVwbGFjZV85MTgsIHt0ZW1wbGF0ZTogTGlzdCgpLCByZXA6IHJlcF85NDN9KS50ZW1wbGF0ZTtcbn1cbmV4cG9ydCB7cHJvY2Vzc1RlbXBsYXRlXzkxOSBhcyBwcm9jZXNzVGVtcGxhdGV9O1xuZXhwb3J0IHtyZXBsYWNlVGVtcGxhdGVfOTIwIGFzIHJlcGxhY2VUZW1wbGF0ZX0iXX0=