"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tokenizer = require("shift-parser/dist/tokenizer");

var _tokenizer2 = _interopRequireDefault(_tokenizer);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _ramdaFantasy = require("ramda-fantasy");

var _errors = require("./errors");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Just_623 = _ramdaFantasy.Maybe.Just;
const Nothing_624 = _ramdaFantasy.Maybe.Nothing;
const LSYNTAX_625 = { name: "left-syntax" };
const RSYNTAX_626 = { name: "right-syntax" };
const AT_627 = { klass: _tokenizer.TokenClass.Punctuator, name: "@" };
const literalKeywords_628 = ["this", "null", "true", "false"];
const isLeftBracket_629 = R.whereEq({ type: _tokenizer.TokenType.LBRACK });
const isLeftBrace_630 = R.whereEq({ type: _tokenizer.TokenType.LBRACE });
const isLeftParen_631 = R.whereEq({ type: _tokenizer.TokenType.LPAREN });
const isRightBracket_632 = R.whereEq({ type: _tokenizer.TokenType.RBRACK });
const isRightBrace_633 = R.whereEq({ type: _tokenizer.TokenType.RBRACE });
const isRightParen_634 = R.whereEq({ type: _tokenizer.TokenType.RPAREN });
const isEOS_635 = R.whereEq({ type: _tokenizer.TokenType.EOS });
const isHash_636 = R.whereEq({ type: _tokenizer.TokenType.IDENTIFIER, value: "#" });
const isLeftSyntax_637 = R.whereEq({ type: LSYNTAX_625 });
const isRightSyntax_638 = R.whereEq({ type: RSYNTAX_626 });
const isLeftDelimiter_639 = R.anyPass([isLeftBracket_629, isLeftBrace_630, isLeftParen_631, isLeftSyntax_637]);
const isRightDelimiter_640 = R.anyPass([isRightBracket_632, isRightBrace_633, isRightParen_634, isRightSyntax_638]);
const isMatchingDelimiters_641 = R.cond([[isLeftBracket_629, (__682, b_683) => isRightBracket_632(b_683)], [isLeftBrace_630, (__684, b_685) => isRightBrace_633(b_685)], [isLeftParen_631, (__686, b_687) => isRightParen_634(b_687)], [isLeftSyntax_637, (__688, b_689) => isRightSyntax_638(b_689)], [R.T, R.F]]);
const assignOps_642 = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ","];
const binaryOps_643 = ["+", "-", "*", "/", "%", "<<", ">>", ">>>", "&", "|", "^", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!==", "instanceof"];
const unaryOps_644 = ["++", "--", "~", "!", "delete", "void", "typeof", "yield", "throw", "new"];
const isEmpty_645 = R.whereEq({ size: 0 });
const isPunctuator_646 = s_690 => s_690.match("punctuator");
const isKeyword_647 = s_691 => s_691.match("keyword");
const isDelimiter_648 = s_692 => s_692.match("delimiter");
const isParens_649 = s_693 => s_693.match("parens");
const isBraces_650 = s_694 => s_694.match("braces");
const isBrackets_651 = s_695 => s_695.match("brackets");
const isIdentifier_652 = s_696 => s_696.match("identifier");
const val_653 = s_697 => s_697.val();
const isVal_654 = R.curry((v_698, s_699) => s_699.val() === v_698);
const isDot_655 = R.allPass([isPunctuator_646, isVal_654(".")]);
const isColon_656 = R.allPass([isPunctuator_646, isVal_654(":")]);
const isFunctionKeyword_657 = R.allPass([isKeyword_647, isVal_654("function")]);
const isOperator_658 = s_700 => (s_700.match("punctuator") || s_700.match("keyword")) && R.any(R.equals(s_700.val()), assignOps_642.concat(binaryOps_643).concat(unaryOps_644));
const isNonLiteralKeyword_659 = R.allPass([isKeyword_647, s_701 => R.none(R.equals(s_701.val()), literalKeywords_628)]);
const isKeywordExprPrefix_660 = R.allPass([isKeyword_647, s_702 => R.any(R.equals(s_702.val()), ["instanceof", "typeof", "delete", "void", "yield", "throw", "new", "case"])]);
let last_661 = p_703 => p_703.last();
let safeLast_662 = R.pipe(R.cond([[isEmpty_645, R.always(Nothing_624())], [R.T, R.compose(_ramdaFantasy.Maybe.of, last_661)]]));
let stuffTrue_663 = R.curry((p_704, b_705) => b_705 ? Just_623(p_704) : Nothing_624());
let stuffFalse_664 = R.curry((p_706, b_707) => !b_707 ? Just_623(p_706) : Nothing_624());
let isTopColon_665 = R.pipe(safeLast_662, R.map(isColon_656), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isTopPunctuator_666 = R.pipe(safeLast_662, R.map(isPunctuator_646), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprReturn_667 = R.curry((l_708, p_709) => {
  let retKwd_710 = safeLast_662(p_709);
  let maybeDot_711 = pop_678(p_709).chain(safeLast_662);
  if (maybeDot_711.map(isDot_655).getOrElse(false)) {
    return true;
  }
  return retKwd_710.map(s_712 => {
    return s_712.match("keyword") && s_712.val() === "return" && s_712.lineNumber() === l_708;
  }).getOrElse(false);
});
const isTopOperator_668 = R.pipe(safeLast_662, R.map(isOperator_658), _ramdaFantasy.Maybe.maybe(false, R.identity));
const isTopKeywordExprPrefix_669 = R.pipe(safeLast_662, R.map(isKeywordExprPrefix_660), _ramdaFantasy.Maybe.maybe(false, R.identity));
let isExprPrefix_670 = R.curry((l_713, b_714) => R.cond([[isEmpty_645, R.always(b_714)], [isTopColon_665, R.always(b_714)], [isTopKeywordExprPrefix_669, R.T], [isTopOperator_668, R.T], [isTopPunctuator_666, R.always(b_714)], [isExprReturn_667(l_713), R.T], [R.T, R.F]]));
let curly_671 = p_715 => safeLast_662(p_715).map(isBraces_650).chain(stuffTrue_663(p_715));
let paren_672 = p_716 => safeLast_662(p_716).map(isParens_649).chain(stuffTrue_663(p_716));
let func_673 = p_717 => safeLast_662(p_717).map(isFunctionKeyword_657).chain(stuffTrue_663(p_717));
let ident_674 = p_718 => safeLast_662(p_718).map(isIdentifier_652).chain(stuffTrue_663(p_718));
let nonLiteralKeyword_675 = p_719 => safeLast_662(p_719).map(isNonLiteralKeyword_659).chain(stuffTrue_663(p_719));
let opt_676 = R.curry((a_720, b_721, p_722) => {
  let result_723 = R.pipeK(a_720, b_721)(_ramdaFantasy.Maybe.of(p_722));
  return _ramdaFantasy.Maybe.isJust(result_723) ? result_723 : _ramdaFantasy.Maybe.of(p_722);
});
let notDot_677 = R.ifElse(R.whereEq({ size: 0 }), Just_623, p_724 => safeLast_662(p_724).map(s_725 => !(s_725.match("punctuator") && s_725.val() === ".")).chain(stuffTrue_663(p_724)));
let pop_678 = R.compose(Just_623, p_726 => p_726.pop());
const functionPrefix_679 = R.pipeK(curly_671, pop_678, paren_672, pop_678, opt_676(ident_674, pop_678), func_673);
const isRegexPrefix_680 = b_727 => R.anyPass([isEmpty_645, isTopPunctuator_666, R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(nonLiteralKeyword_675, pop_678, notDot_677), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, R.pipeK(paren_672, pop_678, nonLiteralKeyword_675, pop_678, notDot_677), _ramdaFantasy.Maybe.isJust), R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_679, R.chain(p_728 => {
  return safeLast_662(p_728).map(s_729 => s_729.lineNumber()).chain(fnLine_730 => {
    return pop_678(p_728).map(isExprPrefix_670(fnLine_730, b_727));
  }).chain(stuffFalse_664(p_728));
}), _ramdaFantasy.Maybe.isJust), p_731 => {
  let isCurly_732 = _ramdaFantasy.Maybe.isJust(safeLast_662(p_731).map(isBraces_650));
  let alreadyCheckedFunction_733 = R.pipe(_ramdaFantasy.Maybe.of, functionPrefix_679, _ramdaFantasy.Maybe.isJust)(p_731);
  if (alreadyCheckedFunction_733) {
    return false;
  }
  return R.pipe(_ramdaFantasy.Maybe.of, R.chain(curly_671), R.chain(p_734 => {
    return safeLast_662(p_734).map(s_735 => s_735.lineNumber()).chain(curlyLine_736 => {
      return pop_678(p_734).map(isExprPrefix_670(curlyLine_736, b_727));
    }).chain(stuffFalse_664(p_734));
  }), _ramdaFantasy.Maybe.isJust)(p_731);
}]);
function lastEl_681(l_737) {
  return l_737[l_737.length - 1];
}
class Reader extends _tokenizer2.default {
  constructor(strings_738, context_739, replacements_740) {
    super(Array.isArray(strings_738) ? strings_738.join("") : strings_738);
    this.delimStack = new Map();
    this.insideSyntaxTemplate = [false];
    this.context = context_739;
    if (Array.isArray(strings_738)) {
      let totalIndex = 0;
      this.replacementIndex = R.reduce((acc_741, strRep_742) => {
        acc_741.push({ index: totalIndex + strRep_742[0].length, replacement: strRep_742[1] });
        totalIndex += strRep_742[0].length;
        return acc_741;
      }, [], R.zip(strings_738, replacements_740));
    }
  }
  read() {
    let stack_743 = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    let b_744 = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    let singleDelimiter_745 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let prefix_746 = (0, _immutable.List)();
    while (true) {
      let tok = this.advance(prefix_746, b_744);
      if (tok instanceof _syntax2.default || tok instanceof _terms2.default) {
        stack_743.push(tok);
        continue;
      }
      if (Array.isArray(tok)) {
        Array.prototype.push.apply(stack_743, tok);
        continue;
      }
      if (_immutable.List.isList(tok)) {
        Array.prototype.push.apply(stack_743, tok.toArray());
        continue;
      }
      if (isEOS_635(tok)) {
        if (stack_743[0] && isLeftDelimiter_639(stack_743[0].token)) {
          throw this.createUnexpected(tok);
        }
        break;
      }
      if (isLeftDelimiter_639(tok)) {
        if (isLeftSyntax_637(tok)) {
          this.insideSyntaxTemplate.push(true);
        }
        let line = tok.slice.startLocation.line;
        let innerB = isLeftBrace_630(tok) ? isExprPrefix_670(line, b_744)(prefix_746) : true;
        let inner = this.read([new _syntax2.default(tok, this.context)], innerB, false);
        let stx = new _syntax2.default(inner, this.context);
        prefix_746 = prefix_746.concat(stx);
        stack_743.push(stx);
        if (singleDelimiter_745) {
          break;
        }
      } else if (isRightDelimiter_640(tok)) {
        if (stack_743[0] && !isMatchingDelimiters_641(stack_743[0].token, tok)) {
          throw this.createUnexpected(tok);
        }
        let stx = new _syntax2.default(tok, this.context);
        stack_743.push(stx);
        if (lastEl_681(this.insideSyntaxTemplate) && isRightSyntax_638(tok)) {
          this.insideSyntaxTemplate.pop();
        }
        break;
      } else {
        let stx = new _syntax2.default(tok, this.context);
        prefix_746 = prefix_746.concat(stx);
        stack_743.push(stx);
      }
    }
    return (0, _immutable.List)(stack_743);
  }
  advance(prefix_747, b_748) {
    let startLocation_749 = this.getLocation();
    this.lastIndex = this.index;
    this.lastLine = this.line;
    this.lastLineStart = this.lineStart;
    this.skipComment();
    this.startIndex = this.index;
    this.startLine = this.line;
    this.startLineStart = this.lineStart;
    if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {
      let rep = this.replacementIndex[0].replacement;
      this.replacementIndex.shift();
      return rep;
    }
    let charCode_750 = this.source.charCodeAt(this.index);
    if (charCode_750 === 96) {
      let element,
          items = [];
      let startLocation_749 = this.getLocation();
      let start = this.index;
      this.index++;
      if (lastEl_681(this.insideSyntaxTemplate)) {
        let slice = this.getSlice(start, startLocation_749);
        return { type: RSYNTAX_626, value: "`", slice: slice };
      }
      do {
        element = this.scanTemplateElement();
        items.push(element);
        if (element.interp) {
          element = this.read([], false, true);
          (0, _errors.assert)(element.size === 1, "should only have read a single delimiter inside a template");
          items.push(element.get(0));
        }
      } while (!element.tail);
      return { type: _tokenizer.TokenType.TEMPLATE, items: (0, _immutable.List)(items) };
    } else if (charCode_750 === 35) {
      let startLocation_749 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_749);
      this.index++;
      if (this.source.charCodeAt(this.index) === 96) {
        this.index++;
        return { type: LSYNTAX_625, value: "#`", slice: slice };
      }
      return { type: _tokenizer.TokenType.IDENTIFIER, value: "#", slice: slice };
    } else if (charCode_750 === 64) {
      let startLocation_749 = this.getLocation();
      let start = this.index;
      let slice = this.getSlice(start, startLocation_749);
      this.index++;
      return { type: AT_627, value: "@", slice: slice };
    }
    let lookahead_751 = super.advance();
    if (lookahead_751.type === _tokenizer.TokenType.DIV && isRegexPrefix_680(b_748)(prefix_747)) {
      return super.scanRegExp("/");
    }
    return lookahead_751;
  }
  scanTemplateElement() {
    let startLocation_752 = this.getLocation();
    let start_753 = this.index;
    while (this.index < this.source.length) {
      let ch = this.source.charCodeAt(this.index);
      switch (ch) {
        case 96:
          let slice = this.getSlice(start_753, startLocation_752);
          this.index++;
          return { type: _tokenizer.TokenType.TEMPLATE, tail: true, interp: false, slice: slice };
        case 36:
          if (this.source.charCodeAt(this.index + 1) === 123) {
            let slice = this.getSlice(start_753, startLocation_752);
            this.index += 1;
            return { type: _tokenizer.TokenType.TEMPLATE, tail: false, interp: true, slice: slice };
          }
          this.index++;
          break;
        case 92:
          {
            let octal = this.scanStringEscape("", null)[1];
            if (octal != null) {
              throw this.createILLEGAL();
            }
            break;
          }
        default:
          this.index++;
      }
    }
    throw this.createILLEGAL();
  }
}
exports.default = Reader;
//# sourceMappingURL=data:application/json;base64,