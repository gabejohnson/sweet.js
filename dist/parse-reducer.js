"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReducer = require("shift-reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseReducer extends _shiftReducer.CloneReducer {
  constructor(context_534) {
    super();
    this.context = context_534;
  }
  reduceModule(node_535, state_536) {
    return new _terms2.default("Module", { directives: state_536.directives.toArray(), items: state_536.items.toArray() });
  }
  reduceImport(node_537, state_538) {
    let moduleSpecifier_539 = state_538.moduleSpecifier ? state_538.moduleSpecifier.val() : null;
    return new _terms2.default("Import", { defaultBinding: state_538.defaultBinding, namedImports: state_538.namedImports.toArray(), moduleSpecifier: moduleSpecifier_539, forSyntax: node_537.forSyntax });
  }
  reduceImportNamespace(node_540, state_541) {
    let moduleSpecifier_542 = state_541.moduleSpecifier ? state_541.moduleSpecifier.val() : null;
    return new _terms2.default("ImportNamespace", { defaultBinding: state_541.defaultBinding, namespaceBinding: state_541.namespaceBinding, moduleSpecifier: moduleSpecifier_542, forSyntax: node_540.forSyntax });
  }
  reduceExport(node_543, state_544) {
    return new _terms2.default("Export", { declaration: state_544.declaration });
  }
  reduceExportAllFrom(node_545, state_546) {
    let moduleSpecifier_547 = state_546.moduleSpecifier ? state_546.moduleSpecifier.val() : null;
    return new _terms2.default("ExportAllFrom", { moduleSpecifier: moduleSpecifier_547 });
  }
  reduceExportFrom(node_548, state_549) {
    let moduleSpecifier_550 = state_549.moduleSpecifier ? state_549.moduleSpecifier.val() : null;
    return new _terms2.default("ExportFrom", { moduleSpecifier: moduleSpecifier_550, namedExports: state_549.namedExports.toArray() });
  }
  reduceExportSpecifier(node_551, state_552) {
    let name_553 = state_552.name,
        exportedName_554 = state_552.exportedName;
    if (name_553 == null) {
      name_553 = exportedName_554.resolve(this.context.phase);
      exportedName_554 = exportedName_554.val();
    } else {
      name_553 = name_553.resolve(this.context.phase);
      exportedName_554 = exportedName_554.val();
    }
    return new _terms2.default("ExportSpecifier", { name: name_553, exportedName: exportedName_554 });
  }
  reduceImportSpecifier(node_555, state_556) {
    let name_557 = state_556.name ? state_556.name.resolve(this.context.phase) : null;
    return new _terms2.default("ImportSpecifier", { name: name_557, binding: state_556.binding });
  }
  reduceIdentifierExpression(node_558, state_559) {
    return new _terms2.default("IdentifierExpression", { name: node_558.name.resolve(this.context.phase) });
  }
  reduceLiteralNumericExpression(node_560, state_561) {
    return new _terms2.default("LiteralNumericExpression", { value: node_560.value.val() });
  }
  reduceLiteralBooleanExpression(node_562, state_563) {
    return new _terms2.default("LiteralBooleanExpression", { value: node_562.value.val() === "true" });
  }
  reduceLiteralStringExpression(node_564, state_565) {
    return new _terms2.default("LiteralStringExpression", { value: node_564.value.token.str });
  }
  reduceCallExpression(node_566, state_567) {
    return new _terms2.default("CallExpression", { callee: state_567.callee, arguments: state_567.arguments.toArray() });
  }
  reduceFunctionBody(node_568, state_569) {
    return new _terms2.default("FunctionBody", { directives: state_569.directives.toArray(), statements: state_569.statements.toArray() });
  }
  reduceFormalParameters(node_570, state_571) {
    return new _terms2.default("FormalParameters", { items: state_571.items.toArray(), rest: state_571.rest });
  }
  reduceBindingIdentifier(node_572, state_573) {
    return new _terms2.default("BindingIdentifier", { name: node_572.name.resolve(this.context.phase) });
  }
  reduceBinaryExpression(node_574, state_575) {
    return new _terms2.default("BinaryExpression", { left: state_575.left, operator: node_574.operator.val(), right: state_575.right });
  }
  reduceObjectExpression(node_576, state_577) {
    return new _terms2.default("ObjectExpression", { properties: state_577.properties.toArray() });
  }
  reduceVariableDeclaration(node_578, state_579) {
    return new _terms2.default("VariableDeclaration", { kind: state_579.kind, declarators: state_579.declarators.toArray() });
  }
  reduceStaticPropertyName(node_580, state_581) {
    return new _terms2.default("StaticPropertyName", { value: node_580.value.val().toString() });
  }
  reduceArrayExpression(node_582, state_583) {
    return new _terms2.default("ArrayExpression", { elements: state_583.elements.toArray() });
  }
  reduceStaticMemberExpression(node_584, state_585) {
    return new _terms2.default("StaticMemberExpression", { object: state_585.object, property: state_585.property.val() });
  }
}
exports.default = ParseReducer;
//# sourceMappingURL=data:application/json;base64,