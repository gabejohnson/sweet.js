"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializer = exports.makeDeserializer = undefined;

var _transitJs = require("transit-js");

var _transitJs2 = _interopRequireDefault(_transitJs);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _symbol = require("./symbol");

var _tokenizer = require("shift-parser/dist/tokenizer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var typeMap_494 = [_tokenizer.TokenType.STRING, _tokenizer.TokenType.EOS, _tokenizer.TokenType.LPAREN, _tokenizer.TokenType.RPAREN, _tokenizer.TokenType.LBRACK, _tokenizer.TokenType.RBRACK, _tokenizer.TokenType.LBRACE, _tokenizer.TokenType.RBRACE, _tokenizer.TokenType.COLON, _tokenizer.TokenType.SEMICOLON, _tokenizer.TokenType.PERIOD, _tokenizer.TokenType.ELLIPSIS, _tokenizer.TokenType.ARROW, _tokenizer.TokenType.CONDITIONAL, _tokenizer.TokenType.INC, _tokenizer.TokenType.DEC, _tokenizer.TokenType.ASSIGN, _tokenizer.TokenType.ASSIGN_BIT_OR, _tokenizer.TokenType.ASSIGN_BIT_XOR, _tokenizer.TokenType.ASSIGN_BIT_AND, _tokenizer.TokenType.ASSIGN_SHL, _tokenizer.TokenType.ASSIGN_SHR, _tokenizer.TokenType.ASSIGN_SHR_UNSIGNED, _tokenizer.TokenType.ASSIGN_ADD, _tokenizer.TokenType.ASSIGN_SUB, _tokenizer.TokenType.ASSIGN_MUL, _tokenizer.TokenType.ASSIGN_DIV, _tokenizer.TokenType.ASSIGN_MOD, _tokenizer.TokenType.COMMA, _tokenizer.TokenType.OR, _tokenizer.TokenType.AND, _tokenizer.TokenType.BIT_OR, _tokenizer.TokenType.BIT_XOR, _tokenizer.TokenType.BIT_AND, _tokenizer.TokenType.SHL, _tokenizer.TokenType.SHR, _tokenizer.TokenType.SHR_UNSIGNED, _tokenizer.TokenType.ADD, _tokenizer.TokenType.SUB, _tokenizer.TokenType.MUL, _tokenizer.TokenType.DIV, _tokenizer.TokenType.MOD, _tokenizer.TokenType.EQ, _tokenizer.TokenType.NE, _tokenizer.TokenType.EQ_STRICT, _tokenizer.TokenType.NE_STRICT, _tokenizer.TokenType.LT, _tokenizer.TokenType.GT, _tokenizer.TokenType.LTE, _tokenizer.TokenType.GTE, _tokenizer.TokenType.INSTANCEOF, _tokenizer.TokenType.IN, _tokenizer.TokenType.NOT, _tokenizer.TokenType.BIT_NOT, _tokenizer.TokenType.AWAIT, _tokenizer.TokenType.DELETE, _tokenizer.TokenType.TYPEOF, _tokenizer.TokenType.VOID, _tokenizer.TokenType.BREAK, _tokenizer.TokenType.CASE, _tokenizer.TokenType.CATCH, _tokenizer.TokenType.CLASS, _tokenizer.TokenType.CONTINUE, _tokenizer.TokenType.DEBUGGER, _tokenizer.TokenType.DEFAULT, _tokenizer.TokenType.DO, _tokenizer.TokenType.ELSE, _tokenizer.TokenType.EXPORT, _tokenizer.TokenType.EXTENDS, _tokenizer.TokenType.FINALLY, _tokenizer.TokenType.FOR, _tokenizer.TokenType.FUNCTION, _tokenizer.TokenType.IF, _tokenizer.TokenType.IMPORT, _tokenizer.TokenType.LET, _tokenizer.TokenType.NEW, _tokenizer.TokenType.RETURN, _tokenizer.TokenType.SUPER, _tokenizer.TokenType.SWITCH, _tokenizer.TokenType.THIS, _tokenizer.TokenType.THROW, _tokenizer.TokenType.TRY, _tokenizer.TokenType.VAR, _tokenizer.TokenType.WHILE, _tokenizer.TokenType.WITH, _tokenizer.TokenType.NULL, _tokenizer.TokenType.TRUE, _tokenizer.TokenType.FALSE, _tokenizer.TokenType.YIELD, _tokenizer.TokenType.NUMBER, _tokenizer.TokenType.STRING, _tokenizer.TokenType.REGEXP, _tokenizer.TokenType.IDENTIFIER, _tokenizer.TokenType.CONST, _tokenizer.TokenType.TEMPLATE, _tokenizer.TokenType.ILLEGAL];
var ListHandler_495 = _transitJs2.default.makeWriteHandler({ tag: function tag() {
    return "array";
  }, rep: function rep(v_501) {
    return v_501;
  } });
var MapHandler_496 = _transitJs2.default.makeWriteHandler({ tag: function tag(v_502) {
    return "map";
  }, rep: function rep(v_503) {
    return v_503;
  }, stringRep: function stringRep(v_504) {
    return null;
  } });
var SyntaxHandler_497 = _transitJs2.default.makeWriteHandler({ tag: function tag() {
    return "stx";
  }, rep: function rep(v_505) {
    if (_immutable.List.isList(v_505.token)) {
      return [v_505.token, v_505.scopesets];
    } else {
      var t = _transitJs2.default.objectToMap(v_505.token);
      t.set("type", typeMap_494.indexOf(v_505.token.type));
      return [t, v_505.scopesets];
    }
  } });
var SymbolHandler_498 = _transitJs2.default.makeWriteHandler({ tag: function tag() {
    return "symb";
  }, rep: function rep(v_506) {
    return [v_506.name];
  } });
var writer_499 = _transitJs2.default.writer("json", { handlers: _transitJs2.default.map([_immutable.List, ListHandler_495, _immutable.Map, MapHandler_496, _syntax2.default, SyntaxHandler_497, _symbol.SymbolClass, SymbolHandler_498]) });
function makeReader_500(bindings_507) {
  return _transitJs2.default.reader("json", { arrayBuilder: { init: function init(node_508) {
        return (0, _immutable.List)().asMutable();
      }, add: function add(ret_509, val_510, node_511) {
        return ret_509.push(val_510);
      }, finalize: function finalize(ret_512, node_513) {
        return ret_512.asImmutable();
      }, fromArray: function fromArray(arr_514, node_515) {
        return (0, _immutable.List)(arr_514);
      } }, mapBuilder: { init: function init(node_516) {
        return (0, _immutable.Map)().asMutable();
      }, add: function add(ret_517, key_518, val_519, node_520) {
        return ret_517.set(key_518, val_519);
      }, finalize: function finalize(ret_521, node_522) {
        return ret_521.asImmutable();
      } }, handlers: { stx: function stx(rep_523) {
        var scopesets_524 = _transitJs2.default.mapToObject(rep_523[1]);
        if (_immutable.List.isList(rep_523[0])) {
          var token = rep_523[0];
          return new _syntax2.default(token, { bindings: bindings_507, scopesets: scopesets_524 });
        } else {
          var _token = _transitJs2.default.mapToObject(rep_523[0]);
          _token.type = typeMap_494[rep_523[0].get("type")];
          _token.slice = rep_523[0].has("slice") ? _transitJs2.default.mapToObject(rep_523[0].get("slice")) : undefined;
          return new _syntax2.default(_token, { bindings: bindings_507, scopesets: scopesets_524 });
        }
      }, symb: function symb(rep_525) {
        return (0, _symbol.Symbol)(rep_525[0]);
      } } });
}
exports.makeDeserializer = makeReader_500;
exports.serializer = writer_499;
//# sourceMappingURL=data:application/json;base64,