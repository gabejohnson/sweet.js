"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Modules = exports.Module = undefined;

var _immutable = require("immutable");

var _env = require("./env");

var _env2 = _interopRequireDefault(_env);

var _store = require("./store");

var _store2 = _interopRequireDefault(_store);

var _shiftReader = require("./shift-reader");

var _shiftReader2 = _interopRequireDefault(_shiftReader);

var _tokenExpander = require("./token-expander.js");

var _tokenExpander2 = _interopRequireDefault(_tokenExpander);

var _termExpander = require("./term-expander.js");

var _termExpander2 = _interopRequireDefault(_termExpander);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _symbol = require("./symbol");

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _loadSyntax = require("./load-syntax");

var _compiler = require("./compiler");

var _compiler2 = _interopRequireDefault(_compiler);

var _transforms = require("./transforms");

var _scope = require("./scope");

var _errors = require("./errors");

var _hygieneUtils = require("./hygiene-utils");

var _syntax = require("./syntax");

var _utilsDirname = require("utils-dirname");

var _utilsDirname2 = _interopRequireDefault(_utilsDirname);

var _ramda = require("ramda");

var _ = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Module_430 {
  constructor(moduleSpecifier_435, isNative_436, importEntries_437, exportEntries_438, pragmas_439, body_440) {
    this.moduleSpecifier = moduleSpecifier_435;
    this.isNative = isNative_436;
    this.importEntries = importEntries_437;
    this.exportEntries = exportEntries_438;
    this.pragmas = pragmas_439;
    this.body = body_440;
  }
}
const findBindingIdentifierName_431 = term_441 => {
  (0, _errors.assert)(term_441.name, `not implemented yet for type ${ term_441.type }`);
  return term_441.name;
};
const convertExport_432 = term_442 => {
  let declaration_443 = term_442.declaration;
  let bindings_444 = [];
  if ((0, _terms.isVariableDeclaration)(declaration_443)) {
    bindings_444 = declaration_443.declarators.map(decl_446 => findBindingIdentifierName_431(decl_446.binding));
  } else if ((0, _terms.isFunctionDeclaration)(declaration_443) || (0, _terms.isClassDeclaration)(declaration_443)) {
    bindings_444.push(findBindingIdentifierName_431(declaration_443.name));
  }
  let namedExports_445 = bindings_444.map(binding_447 => {
    return new _terms2.default("ExportSpecifier", { name: null, exportedName: binding_447 });
  });
  return new _terms2.default("ExportFrom", { moduleSpecifier: null, namedExports: (0, _immutable.List)(namedExports_445) });
};
const pragmaRegep_433 = /^\s*#\w*/;
class Modules_434 {
  constructor(context_448) {
    this.compiledModules = new Map();
    this.context = context_448;
    this.context.modules = this;
  }
  loadString(str_449) {
    let checkPragma_450 = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    let hasPragma_451 = pragmaRegep_433.test(str_449);
    if (checkPragma_450 && !hasPragma_451) {
      return { isNative: true, body: (0, _immutable.List)() };
    }
    return { isNative: !hasPragma_451, body: new _shiftReader2.default(str_449).read() };
  }
  load(path_452) {
    return this.loadString(this.context.moduleLoader(path_452));
  }
  compile(mod_453, path_454) {
    let stxl_455 = mod_453.body;
    let outScope_456 = (0, _scope.freshScope)("outsideEdge");
    let inScope_457 = (0, _scope.freshScope)(`insideEdge0`);
    let compiler_458 = new _compiler2.default(0, new _env2.default(), new _store2.default(), _.merge(this.context, { currentScope: [outScope_456, inScope_457], cwd: path_454 === "<<entrypoint>>" ? this.context.cwd : (0, _utilsDirname2.default)(path_454) }));
    let terms_459 = compiler_458.compile(stxl_455.map(s_464 => s_464.addScope(outScope_456, this.context.bindings, _syntax.ALL_PHASES).addScope(inScope_457, this.context.bindings, 0)));
    let importEntries_460 = [];
    let exportEntries_461 = [];
    let pragmas_462 = [];
    let filteredTerms_463 = terms_459.reduce((acc_465, t_466) => {
      return _.cond([[_terms.isImport, t_467 => {
        importEntries_460.push(t_467);
        return acc_465;
      }], [_terms.isExport, t_468 => {
        if (t_468.declaration) {
          exportEntries_461.push(convertExport_432(t_468));
          if ((0, _terms.isVariableDeclaration)(t_468.declaration)) {
            return acc_465.concat(new _terms2.default("VariableDeclarationStatement", { declaration: t_468.declaration }));
          }
          return acc_465.concat(t_468.declaration);
        }
        exportEntries_461.push(t_468);
        return acc_465;
      }], [_terms.isPragma, t_469 => {
        pragmas_462.push(t_469);
        return acc_465;
      }], [_.T, t_470 => acc_465.concat(t_470)]])(t_466);
    }, (0, _immutable.List)());
    return new Module_430(path_454, mod_453.isNative, (0, _immutable.List)(importEntries_460), (0, _immutable.List)(exportEntries_461), (0, _immutable.List)(pragmas_462), filteredTerms_463);
  }
  compileEntrypoint(source_471, filename_472) {
    let enforcePragma_473 = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    let stxl_474 = this.loadString(source_471, false);
    if (enforcePragma_473 && stxl_474.isNative) {
      throw new Error(`Entrypoint ${ filename_472 } must begin with #lang pragma`);
    }
    return this.getAtPhase("<<entrypoint>>", 0, this.context.cwd, stxl_474);
  }
  getAtPhase(rawPath_475, phase_476, cwd_477) {
    let rawStxl_478 = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

    let path_479 = rawPath_475 === "<<entrypoint>>" ? rawPath_475 : this.context.moduleResolver(rawPath_475, cwd_477);
    let mapKey_480 = `${ path_479 }:${ phase_476 }`;
    if (!this.compiledModules.has(mapKey_480)) {
      if (phase_476 === 0) {
        let stxl = rawStxl_478 != null ? rawStxl_478 : this.load(path_479);
        this.compiledModules.set(mapKey_480, this.compile(stxl, path_479));
      } else {
        let rawMod = this.getAtPhase(rawPath_475, 0, cwd_477, rawStxl_478);
        let scope = (0, _scope.freshScope)(`insideEdge${ phase_476 }`);
        this.compiledModules.set(mapKey_480, new Module_430(rawMod.moduleSpecifier, false, rawMod.importEntries.map(term_481 => term_481.addScope(scope, this.context.bindings, phase_476)), rawMod.exportEntries.map(term_482 => term_482.addScope(scope, this.context.bindings, phase_476)), rawMod.pragmas, rawMod.body.map(term_483 => term_483.addScope(scope, this.context.bindings, phase_476))));
      }
    }
    return this.compiledModules.get(mapKey_480);
  }
  has(rawPath_484) {
    let phase_485 = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

    let path_486 = rawPath_484 === "<<entrypoint>>" ? rawPath_484 : this.context.moduleResolver(rawPath_484, this.context.cwd);
    let key_487 = `${ path_486 }:${ phase_485 }`;
    return this.compiledModules.has(key_487) && !this.compiledModules.get(key_487).isNative;
  }
  registerSyntaxDeclaration(term_488, phase_489, store_490) {
    term_488.declarators.forEach(decl_491 => {
      let val_492 = (0, _loadSyntax.evalCompiletimeValue)(decl_491.init.gen(), _.merge(this.context, { phase: phase_489 + 1, store: store_490 }));
      (0, _hygieneUtils.collectBindings)(decl_491.binding).forEach(stx_493 => {
        if (phase_489 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_493.val());
          this.context.bindings.add(stx_493, { binding: newBinding, phase: phase_489, skipDup: false });
        }
        let resolvedName_494 = stx_493.resolve(phase_489);
        store_490.set(resolvedName_494, new _transforms.CompiletimeTransform(val_492));
      });
    });
  }
  registerVariableDeclaration(term_495, phase_496, store_497) {
    term_495.declarators.forEach(decl_498 => {
      (0, _hygieneUtils.collectBindings)(decl_498.binding).forEach(stx_499 => {
        if (phase_496 !== 0) {
          let newBinding = (0, _symbol.gensym)(stx_499.val());
          this.context.bindings.add(stx_499, { binding: newBinding, phase: phase_496, skipDup: term_495.kind === "var" });
        }
        let resolvedName_500 = stx_499.resolve(phase_496);
        store_497.set(resolvedName_500, new _transforms.VarBindingTransform(stx_499));
      });
    });
  }
  registerFunctionOrClass(term_501, phase_502, store_503) {
    (0, _hygieneUtils.collectBindings)(term_501.name).forEach(stx_504 => {
      if (phase_502 !== 0) {
        let newBinding = (0, _symbol.gensym)(stx_504.val());
        this.context.bindings.add(stx_504, { binding: newBinding, phase: phase_502, skipDup: false });
      }
      let resolvedName_505 = stx_504.resolve(phase_502);
      store_503.set(resolvedName_505, new _transforms.VarBindingTransform(stx_504));
    });
  }
  visit(mod_506, phase_507, store_508) {
    mod_506.body.forEach(term_509 => {
      if ((0, _terms.isSyntaxDeclarationStatement)(term_509)) {
        this.registerSyntaxDeclaration(term_509.declaration, phase_507, store_508);
      }
    });
    return store_508;
  }
  invoke(mod_510, phase_511, store_512) {
    let body_513 = mod_510.body.filter(_.complement(_terms.isCompiletimeStatement)).map(term_515 => {
      term_515 = term_515.gen();
      if ((0, _terms.isVariableDeclarationStatement)(term_515)) {
        this.registerVariableDeclaration(term_515.declaration, phase_511, store_512);
      } else if ((0, _terms.isFunctionDeclaration)(term_515)) {
        this.registerFunctionOrClass(term_515, phase_511, store_512);
      }
      return term_515;
    });
    let exportsObj_514 = (0, _loadSyntax.evalRuntimeValues)(body_513, _.merge(this.context, { store: store_512, phase: phase_511 }));
    return store_512;
  }
}
exports.Module = Module_430;
exports.Modules = Modules_434;
//# sourceMappingURL=data:application/json;base64,